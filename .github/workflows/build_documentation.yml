name: build_documentation

on:
  push:
    branches:
      - main
      - dev
      - doc/auto-uml

env:
  DOCUMENTATION_PATH: docs

jobs:
  build:
    name: Build Github Pages resources 
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: plantuml
        id: plantuml
        uses: grassedge/generate-plantuml-action@v1.5
        with:
          path: ${{ env.DOCUMENTATION_PATH }}/diagrams/src
          message: Render PlantUML files
        # FIXME ignore plantuml failure for now
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: docs-venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}
      - name: Install poetry export plugin
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry self add poetry-plugin-export
      - name: Poetry lock
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry lock
      - name: Export requirements.txt
        run: |
          poetry export -n --without-hashes --only=docs -f requirements.txt -o ${{ env.DOCUMENTATION_PATH }}/requirements.txt
      - uses: sphinx-notes/pages@v3
        id: sphinx
        if: success() || failure()
        with:
          cache: true
          checkout: false
          publish: false
          python_version: '3.11'
          sphinx_version: '7.2.*'
          documentation_path: ${{ env.DOCUMENTATION_PATH }}
          requirements_path: ./${{ env.DOCUMENTATION_PATH }}/requirements.txt
          pyproject_extras: ''
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: gh-pages-${{ github.sha }}
          path: ${{ steps.sphinx.outputs.artifact }}

  publish:
    name: Publish Github Pages
    needs: build
    uses: ./.github/workflows/deploy_documentation.yml
    if: ${{ github.ref_name == github.event.repository.default_branch }}
    with:
      artifact: gh-pages-${{ github.sha }}
