# This workflow will
# - install Python dependencies;
# - lint and run tests with a variety of Python versions;
# - test docker image build;
# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test and Build Application

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  python:
    name: Test Application
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.10", "3.11" ]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        echo "APP=pipo" > .env
        make poetry_setup

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-venv-python${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        make dev_setup

    - name: Run isort
      run: |
        make isort

    - name: Run black
      run: |
        make black

    - name: Run mypy
      run: |
        make mypy

    - name: Run pylint
      run: |
        make pylint

    - name: Run bandit
      run: |
        make bandit

    - name: Test
      run: |
        make test

  docker:
    name: Build Docker Image
    runs-on: ubuntu-22.04
    env:
      REGISTRY: ghcr.io
      TARGET_PLATFORM: linux/arm/v7
    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest

    - name: Set variables
      if: success()
      id: prepare
      shell: bash
      run: |
        echo image=${GITHUB_REPOSITORY,,} >> $GITHUB_OUTPUT
        echo platform=${TARGET_PLATFORM} >> $GITHUB_OUTPUT

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ steps.prepare.outputs.image }}

    - name: Test build
      uses: docker/build-push-action@v3
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: ${{ steps.prepare.outputs.platform }}
