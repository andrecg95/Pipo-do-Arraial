[tool.poetry]
name = "pipo"
version = "0.1.0"
description = "Bot to play music in a discord channel"

license = "MIT"

authors = [
    "André Gonçalves <andrecg95@gmail.com>",
    "Tiago Gonçalves <tiago14_ribeiro@hotmail.com>",
]

readme = 'README.md'

keywords = ['python', 'discord', 'music', 'bot']

classifiers = [
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Operating System :: OS Independent',
    'Natural Language :: English',
    'Topic :: Multimedia :: Sound/Audio',
    'Topic :: Multimedia :: Sound/Audio :: Players',
]

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.31"
yt-dlp = "~2023.7.0"
discord-py = { version = "~2.3.0", extras = ["voice"] }
dynaconf = { version = "~3.1.0", extras = ["yaml"] }

[tool.poetry.dev-dependencies]
setuptools = "*"
sphinx = "~7.2.0"
pytest = "^7.1"
mock = "~5.0.0"
pytest-mock = "~3.10.0"
pytest-asyncio = "~0.21.0"
pytest-cov = "~4.1.0"
types-mock = "^5.0.0"
dpytest = "0.7.0"
flaky = "~3.7.0"
ruff = "0.0.280"
black = "22.8.0"
vulture = "2.7"

[tool.poetry.scripts]
pipo = "pipo.__main__:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"
mock_use_standalone_module = true
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ['pipo']
[tool.coverage.report]
fail_under = 65
omit = [
    '*__init__.py',
    '*__main__.py',
]

[tool.ruff]
select = [
    "E",        #pycodestyle error
    "W",        #pycodestyle warning
    "D",        #pydocstyle
    "F",        #pyflakes
    "I",        #isort
    "B",        #bugbear
    "S",        #bandit
    "N",        #pep8-naming
    "G",        #flake8-logging-format
    "PL",       #pylint
    "FLY",      #flynt
    "TRY",      #tryceratops
    "TCH",      #flake8-type-checking
    "C90",      #McCabe complexity
    "ASYNC",    #flake8-async
]
extend-exclude = [
    "tests",
    "*__main__.py",
    "*__init__.py",
]
format = "grouped"
line-length = 88
ignore = [
    "D100", # missing docstring in public module
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.vulture]
paths = ["pipo/"]
make_whitelist = true
min_confidence = 70
sort_by_size = true
